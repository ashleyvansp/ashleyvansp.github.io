<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ashley Van Spankeren</title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 02 May 2021 20:57:29 -0600</pubDate>
    <lastBuildDate>Sun, 02 May 2021 20:57:29 -0600</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>Git Hooks</title>
        <description>&lt;h3 id=&quot;what-are-hooks&quot;&gt;What are hooks?&lt;/h3&gt;

&lt;p&gt;Hooks are scripts that Git executes automatically when triggered by events such as a commit or a push. The samples provided by Git are Bash shell scripts, but they can be written in any scripting language that can be run as an executable. Hooks can be powerful tools with a wide range of functionality, including but not limited to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Code formatting such as following naming conventions and checking for trailing whitespace&lt;/li&gt;
  &lt;li&gt;Alerts for unreachable code or uninitialized variables&lt;/li&gt;
  &lt;li&gt;Running unit testing suites&lt;/li&gt;
  &lt;li&gt;Sending email notifications when the repository is updated&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-are-they-activated&quot;&gt;How are they activated?&lt;/h3&gt;
&lt;p&gt;Thinking about a continuous integration workflow, we see that different tasks for a hook make sense at different places. For instance, if you want a hook that ensures commit messages are capitalized, you would want it to execute immediately after the user enters the commit message. With this in mind, Git has identified the 12 possible places in the workflow where a hook can execute and these are specified by the name of the file in the hooks directory. Git also provides a sample script for each of the 12 hooks, and they are activated by removing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.sample&lt;/code&gt; from the name.&lt;/p&gt;

&lt;h3 id=&quot;whats-the-catch&quot;&gt;What’s the &lt;em&gt;catch&lt;/em&gt;?&lt;/h3&gt;
&lt;p&gt;The main caveat for team-based projects is that hooks are local to a Git repository and they are not copied over to the new repository after running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt;. They also aren’t included under version control, so it can be challenging to keep them synchronized between team members. However, there are ways to regulate this: hook scripts can be stored in the project directory and installed with either a symlink or a simple copy-paste after the project is cloned.&lt;/p&gt;

&lt;h3 id=&quot;client-side-vs-server-side&quot;&gt;Client-side vs. server-side&lt;/h3&gt;
&lt;p&gt;Client-side hooks can best be used for commit-related tasks - such as formatting code or commit messages - and notification tasks such as emailing collaborators when changes are made. There’s also functionality with checking out or merging.&lt;br /&gt;
Since client-side hooks can be modified (or even removed) by the developer in their local repository, they can’t be used to enforce coding standards, only to facilitate good coding practices. However, server-side hooks can be a safeguard against the rebellious developer by rejecting any commits that do not meet specified standards. This is the primary purpose of server-side hooks and they’re most useful on large projects to regulate who is allowed to push to the repo, the format of the commit message, or the changes contained in the commit.&lt;/p&gt;

&lt;h3 id=&quot;a-simple-example&quot;&gt;A simple example&lt;/h3&gt;
&lt;p&gt;Suppose your company suspects that their rivals are sneaking into your office in the shadow of night and forging bad commits on employees’ computers. To defend against this, the obvious thing to do is add a secret password before allowing commits.&lt;br /&gt;
For the acute learner, it may be important to note that while the rivals excel in espionage, they lack the technical expertise to understand how hooks work and hence we can add client-side hooks without worrying that they will be disabled.&lt;br /&gt;
We add the following hook to the folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git/hooks&lt;/code&gt; under the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre-commit&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;#!/usr/local/bin/python3
  
import sys

if __name__ == &apos;__main__&apos;:
    sys.stdin = open(&quot;/dev/tty&quot;, &quot;r&quot;)
    inp = input(&quot;What\&apos;s the secret password?\n&quot;)
    if inp == &apos;CodingRox&apos;:
        print(&apos;Password correct.&apos;)
        exit(0)
    else:
        print(&apos;Password denied.&apos;)
        exit(1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then after making changes, we can see the effects of our security measures as follows:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;/assets/images/posts/2021/git_hooks.png&quot; alt=&quot;Git commit&quot; /&gt;
    
        &lt;figcaption class=&quot;caption-text&quot;&gt;Performing a commit with a pre-commit hook.&lt;/figcaption&gt; 
    
&lt;/figure&gt;

</description>
        <pubDate>Tue, 16 Feb 2021 00:00:00 -0700</pubDate>
        <link>/git-hooks</link>
        <guid isPermaLink="true">/git-hooks</guid>
        
        <category>Git</category>
        
        <category>How-To</category>
        
        
      </item>
    
      <item>
        <title>WTF is MVVM</title>
        <description>&lt;p&gt;POV: It’s the first day of your internship at a tech company. You’re a little nervous, but you know how to reverse a linked list, so you figure you’ve got this. You don’t know exactly what a casual dress code allows, so you opt for something that your grandma would approve of for Sunday dinner; respectable but not trying too hard. Flash forward to your first team meeting: walking through the project code base. Amidst a plethora of abbreviations getting thrown around, the tech lead mentions “… and we use &lt;em&gt;sequel server&lt;/em&gt; for our DBMS”. Wait - that’s how SQL is pronounced? Now you’re panicking, remembering that not only did you call it “ess cue ell” in the interview but you don’t remember the difference between an inner join and outer join.&lt;/p&gt;

&lt;p&gt;Parsing the jargon used in the world of software development often feels like learning a whole new language (and this is on top of actually learning new programming languages). Here are some terms I wish I knew before starting my first internship:&lt;/p&gt;

&lt;h5 id=&quot;cli-command-line-interface&quot;&gt;CLI (Command Line Interface)&lt;/h5&gt;
&lt;p&gt;A way to interact with a program using text-based commands (often done through Command Prompt/ Terminal/ your shell of choice). A CLI is a lightweight alternative to a GUI.&lt;/p&gt;

&lt;h5 id=&quot;gui-graphical-user-interface&quot;&gt;GUI (Graphical User Interface)&lt;/h5&gt;
&lt;p&gt;Often pronounced “gooey”. This is a way to interact with a program through clicking, scrolling, dragging, and dropping. A GUI is a prettier alternative to a CLI.&lt;/p&gt;

&lt;h5 id=&quot;vcs-version-control-system&quot;&gt;VCS (Version Control System)&lt;/h5&gt;
&lt;p&gt;This is a way for teams to keep track of changes to a codebase. If you’re not yet familiar, checkout &lt;a href=&quot;https://git-scm.com&quot;&gt;Git&lt;/a&gt; (pun intended).&lt;/p&gt;

&lt;h4 id=&quot;front-end&quot;&gt;Front end&lt;/h4&gt;
&lt;p&gt;(AKA client side)&lt;br /&gt;
The part of an application that users interact with. Front end code usually looks like HTML, CSS, and Javascript.&lt;/p&gt;

&lt;h4 id=&quot;back-end&quot;&gt;Back end&lt;/h4&gt;
&lt;p&gt;(AKA server side)&lt;br /&gt;
The part of an application that communicates between the database and the browser. Also the part that users don’t see. Back end code may include Java, Python, or C#.&lt;/p&gt;

&lt;h4 id=&quot;architecture&quot;&gt;Architecture&lt;/h4&gt;
&lt;p&gt;A frustratingly broad term that refers to the structure or design of the codebase. The architecture defines the different elements or layers of the application, as well as properties or relations that exist between them. MVC (model-view-controller) and MVVM (model-view-viewmodel) are two common architectures.&lt;/p&gt;

&lt;h4 id=&quot;saas-software-as-a-service&quot;&gt;SaaS (Software as a Service)&lt;/h4&gt;
&lt;p&gt;Different from &lt;a href=&quot;https://sass-lang.com/&quot;&gt;Sass&lt;/a&gt;, although pronounced the same. SaaS is used interchangeably with “cloud-based solution” and is spoken of fondly because it allows users to access their application from a web browser, rather than downloading and installing it on their computer.&lt;/p&gt;

&lt;h4 id=&quot;ide-integrated-development-environment&quot;&gt;IDE (Integrated Development Environment)&lt;/h4&gt;
&lt;p&gt;An application containing tools to assist with software development. Such tools may include a text editor, debugger, and console.&lt;/p&gt;

&lt;h4 id=&quot;local&quot;&gt;Local&lt;/h4&gt;
&lt;p&gt;To run a program locally means to run it on your current device, rather than on a remote server (or “in production/ beta/ some other environment”). The beauty of running locally is that your changes affect only your local device, i.e. you’re not going to crash that super important client project. When running locally, you can usually access the application and see your changes by going to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt; in a web browser.&lt;/p&gt;

&lt;p&gt;This just scratches the surface of the ever-expanding terminology used in the software world. The reality is, regardless of how prepared you try to be, the first day (and week and probably month) is going to be like drinking from a fire hose. Stay curious, enjoy the learning process, and ask for clarification. You might not know (yet!) the difference between MySQL and PostgreSQL but hey, at least now you know how to pronounce it.&lt;/p&gt;

</description>
        <pubDate>Tue, 02 Feb 2021 00:00:00 -0700</pubDate>
        <link>/wtf-is-mvvm</link>
        <guid isPermaLink="true">/wtf-is-mvvm</guid>
        
        <category>Co-op</category>
        
        <category>Internship</category>
        
        <category>Tips</category>
        
        
      </item>
    
  </channel>
</rss>
