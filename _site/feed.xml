<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ashley Van Spankeren</title>
    <description></description>
    <link>/</link>
    <atom:link href="/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 09 May 2021 13:45:22 -0600</pubDate>
    <lastBuildDate>Sun, 09 May 2021 13:45:22 -0600</lastBuildDate>
    <generator>Jekyll v4.2.0</generator>
    
      <item>
        <title>♪ Let&apos;s Get Virtual! ♪</title>
        <description>&lt;p&gt;At the time of this writing, social distancing and isolation are the perhaps the most recommended ways to “stay safe in these unprecedented times”. It turns out that an isolated environment can keep your computer safe, too. Sandbox environments, virtual machines, and software containers can all help to protect your local machine from contamination or compatibility issues. Virtualization also increases flexbility, allowing you to run different OS-specific programs on the same hardware. And since the last year has proven that the only constant is change, virtual machines give the comfort of disaster recovery, making it easier to backup data or scale a platform. Regardless of the reason that your code isn’t running locally, it’s important that development feels seamless, with all the comforts of home.&lt;/p&gt;

&lt;h2 id=&quot;virtualbox&quot;&gt;VirtualBox&lt;/h2&gt;
&lt;p&gt;VirtualBox is a desktop application that allows your computer to run multiple operating systems without needing a dual-boot or any other software that might react poorly with your existing OS. It came in handy when I was developing an application that required Ubuntu, and I’ve used it often since then to test cross-platform compatibility and run code in an isolated environment. All you need to download is the VirtualBox application and the ISO file (or “image”) of the new operating system.&lt;br /&gt;
As an example, here’s a guide to setting up a virtual machine with Ubuntu 18.04 on a Mac OS home environment:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Download and install &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;VirtualBox&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Download the &lt;a href=&quot;https://releases.ubuntu.com/18.04.5/?_ga=2.146335351.2121979773.1620581367-542056388.1620581367&quot;&gt;Ubuntu 18.04 desktop image&lt;/a&gt;. Take note of where the file is saved.&lt;/li&gt;
  &lt;li&gt;Open the VirtualBox application and add a new machine. If you start entering ‘Ubuntu’ as the name, it should autofill Linux and Ubuntu (64-bit) as the type and version, respectively.&lt;/li&gt;
  &lt;li&gt;Press continue (accepting the defaults) for memory size and hard disk.&lt;/li&gt;
  &lt;li&gt;Select VDI (Virtual Disk Image) as the hard disk type.&lt;/li&gt;
  &lt;li&gt;Select Dynamically allocated for the storage on physical hard disk.&lt;/li&gt;
  &lt;li&gt;Accept the default values for file location and size, then press Create.&lt;/li&gt;
  &lt;li&gt;In the VirtualBox Manager, select your newly created machine and press Start (Normal Start).&lt;/li&gt;
  &lt;li&gt;It should prompt you to select a virtual optical disk file. Click the folder icon to browse to the Ubuntu 18.04 ISO file saved in step 2.&lt;/li&gt;
  &lt;li&gt;In the install wizard, choose Install Ubuntu, select your desired keyboard layout, then select Normal installation.&lt;/li&gt;
  &lt;li&gt;Then it’ll ask about the installation type. Select Erase disk and install Ubuntu. Spooky! But that’s the beauty of virtualization; your home environment is completely protected.
 &lt;img src=&quot;/assets/images/posts/2021/lets-get-virtual/installation-type.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Press continue for the rest of the options. Enter a username and password when prompted, then restart the virtual machine.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;br /&gt;
You now have a fully functional Ubuntu environment! Options such as RAM, storage size, and display ratio can be tweaked and configured to suit your needs (within the constraints of your hard drive).&lt;/p&gt;

&lt;h2 id=&quot;ssh&quot;&gt;SSH&lt;/h2&gt;
&lt;p&gt;The ability to communicate between your local machine and the virtual one will come in handy time and time again. We also need SSH for the final, pinnacle step, so let’s see how to set that up:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Start up the virtual machine you just created and log in.&lt;/li&gt;
  &lt;li&gt;Open the Terminal app in the virtual machine.&lt;/li&gt;
  &lt;li&gt;Install openssh-server by running the following commands:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; sudo apt-get update
 sudo apt-get install openssh-server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;Power off the virtual machine.&lt;/li&gt;
  &lt;li&gt;In the VirtualBox Manager, select your new machine and click Settings.&lt;/li&gt;
  &lt;li&gt;Go to the tab for Network.&lt;/li&gt;
  &lt;li&gt;Under Adapter 1, open Advanced and click Port Forwarding.&lt;/li&gt;
  &lt;li&gt;Add the following entry:
 &lt;img src=&quot;/assets/images/posts/2021/lets-get-virtual/network-entry.png&quot; alt=&quot;&quot; /&gt;&lt;/li&gt;
  &lt;li&gt;Start up the virtual machine.&lt;/li&gt;
  &lt;li&gt;From your local machine, open Terminal and enter the following command, replacing YOUR_USERNAME with the account you set up:
    &lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ssh -p 2522 YOUR_USERNAME@127.0.0.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;If prompted about the authenticity of the host, enter yes.&lt;/li&gt;
  &lt;li&gt;Enter the password for your virtual machine, then you’re in.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;visual-studio-code-remote-development&quot;&gt;Visual Studio Code Remote Development&lt;/h2&gt;
&lt;p&gt;This one is a &lt;em&gt;game changer&lt;/em&gt;. Visual Studio Code is a free, open source code editor with all the extensions you could wish for. In particular, the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack&quot;&gt;Remote Development Extension Pack&lt;/a&gt; allows you to edit code that’s located in a container, virtual machine, or remote server, right from your local environment. This means that you can seamlessly swap between multiple environments without having to copy any source code to your computer.&lt;br /&gt;
Setting it up is quick and simple for any environment to which you have SSH access. Let’s see how to configure it for the virtual machine that we installed earlier:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;In the VirtualBox Manager, start up the Ubuntu virtual machine. We don’t need to interact with it directly, so you can minimize the window.&lt;/li&gt;
  &lt;li&gt;On your home machine, download and install &lt;a href=&quot;https://code.visualstudio.com/&quot;&gt;Visual Studio Code&lt;/a&gt;. Open it, then download and activate the &lt;a href=&quot;https://marketplace.visualstudio.com/items?itemName=ms-vscode-remote.vscode-remote-extensionpack&quot;&gt;Remote Development Extension Pack&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;On the left sidebar, you should now see the Remote Explorer pane. Open it, and in the dropdown at the top, select SSH Targets.&lt;/li&gt;
  &lt;li&gt;Click the plus icon to add a new SSH target. Enter the same SSH connection command that you used from the command line above: &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ssh -p 2522 YOUR_USERNAME@127.0.0.1&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;Select your SSH config file if prompted.&lt;/li&gt;
  &lt;li&gt;You should now see your virtual machine as an SSH target in the Remote Explorer. Hover over the name, then press the folder icon to Connect to Host in New Window.&lt;/li&gt;
  &lt;li&gt;Enter your password when prompted, then you have access to create and modify files as desired.&lt;/li&gt;
&lt;/ol&gt;

&lt;h2&gt;—&lt;/h2&gt;
&lt;p&gt;The capabilities of these three tools truly enrich the experience of virtualization and remote development. Not only do they give developers the freedom to test new versions with the safety net of isolation, they facilitate cohesion and consistency in team-based development, allowing all contributors to work in the same environment. By decoupling the technology from the available infrastructure, virtualization opens the door for improved efficiency, increased flexibility, and bolder innovation. And &lt;em&gt;that&lt;/em&gt; seems like something worth dancing about.&lt;/p&gt;
</description>
        <pubDate>Sun, 18 Apr 2021 00:00:00 -0600</pubDate>
        <link>/lets-get-virtual</link>
        <guid isPermaLink="true">/lets-get-virtual</guid>
        
        <category>VM</category>
        
        <category>How-To</category>
        
        <category>Virtualization</category>
        
        
      </item>
    
      <item>
        <title>Git Hooks</title>
        <description>&lt;h3 id=&quot;what-are-hooks&quot;&gt;What are hooks?&lt;/h3&gt;

&lt;p&gt;Hooks are scripts that Git executes automatically when triggered by events such as a commit or a push. The samples provided by Git are Bash shell scripts, but they can be written in any scripting language that can be run as an executable. Hooks can be powerful tools with a wide range of functionality, including but not limited to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Code formatting such as following naming conventions and checking for trailing whitespace&lt;/li&gt;
  &lt;li&gt;Alerts for unreachable code or uninitialized variables&lt;/li&gt;
  &lt;li&gt;Running unit testing suites&lt;/li&gt;
  &lt;li&gt;Sending email notifications when the repository is updated&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;how-are-they-activated&quot;&gt;How are they activated?&lt;/h3&gt;
&lt;p&gt;Thinking about a continuous integration workflow, we see that different tasks for a hook make sense at different places. For instance, if you want a hook that ensures commit messages are capitalized, you would want it to execute immediately after the user enters the commit message. With this in mind, Git has identified the 12 possible places in the workflow where a hook can execute and these are specified by the name of the file in the hooks directory. Git also provides a sample script for each of the 12 hooks, and they are activated by removing &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.sample&lt;/code&gt; from the name.&lt;/p&gt;

&lt;h3 id=&quot;whats-the-catch&quot;&gt;What’s the &lt;em&gt;catch&lt;/em&gt;?&lt;/h3&gt;
&lt;p&gt;The main caveat for team-based projects is that hooks are local to a Git repository and they are not copied over to the new repository after running &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone&lt;/code&gt;. They also aren’t included under version control, so it can be challenging to keep them synchronized between team members. However, there are ways to regulate this: hook scripts can be stored in the project directory and installed with either a symlink or a simple copy-paste after the project is cloned.&lt;/p&gt;

&lt;h3 id=&quot;client-side-vs-server-side&quot;&gt;Client-side vs. server-side&lt;/h3&gt;
&lt;p&gt;Client-side hooks can best be used for commit-related tasks - such as formatting code or commit messages - and notification tasks such as emailing collaborators when changes are made. There’s also functionality with checking out or merging.&lt;br /&gt;
Since client-side hooks can be modified (or even removed) by the developer in their local repository, they can’t be used to enforce coding standards, only to facilitate good coding practices. However, server-side hooks can be a safeguard against the rebellious developer by rejecting any commits that do not meet specified standards. This is the primary purpose of server-side hooks and they’re most useful on large projects to regulate who is allowed to push to the repo, the format of the commit message, or the changes contained in the commit.&lt;/p&gt;

&lt;h3 id=&quot;a-simple-example&quot;&gt;A simple example&lt;/h3&gt;
&lt;p&gt;Suppose your company suspects that their rivals are sneaking into your office in the shadow of night and forging bad commits on employees’ computers. To defend against this, the obvious thing to do is add a secret password before allowing commits.&lt;br /&gt;
For the acute learner, it may be important to note that while the rivals excel in espionage, they lack the technical expertise to understand how hooks work and hence we can add client-side hooks without worrying that they will be disabled.&lt;br /&gt;
We add the following hook to the folder &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;.git/hooks&lt;/code&gt; under the name &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;pre-commit&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-py&quot;&gt;#!/usr/local/bin/python3
  
import sys

if __name__ == &apos;__main__&apos;:
    sys.stdin = open(&quot;/dev/tty&quot;, &quot;r&quot;)
    inp = input(&quot;What\&apos;s the secret password?\n&quot;)
    if inp == &apos;CodingRox&apos;:
        print(&apos;Password correct.&apos;)
        exit(0)
    else:
        print(&apos;Password denied.&apos;)
        exit(1)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Then after making changes, we can see the effects of our security measures as follows:&lt;/p&gt;
&lt;figure&gt;
    &lt;img src=&quot;/assets/images/posts/2021/git_hooks.png&quot; alt=&quot;Git commit&quot; /&gt;
    
        &lt;figcaption class=&quot;caption-text&quot;&gt;Performing a commit with a pre-commit hook.&lt;/figcaption&gt; 
    
&lt;/figure&gt;

</description>
        <pubDate>Tue, 16 Feb 2021 00:00:00 -0700</pubDate>
        <link>/git-hooks</link>
        <guid isPermaLink="true">/git-hooks</guid>
        
        <category>Git</category>
        
        <category>How-To</category>
        
        
      </item>
    
      <item>
        <title>WTF is MVVM</title>
        <description>&lt;p&gt;POV: It’s the first day of your internship at a tech company. You’re a little nervous, but you know how to reverse a linked list, so you figure you’ve got this. You don’t know exactly what a casual dress code allows, so you opt for something that your grandma would approve of for Sunday dinner; respectable but not trying too hard. Flash forward to your first team meeting: walking through the project code base. Amidst a plethora of abbreviations getting thrown around, the tech lead mentions “… and we use &lt;em&gt;sequel server&lt;/em&gt; for our DBMS”. Wait - that’s how SQL is pronounced? Now you’re panicking, remembering that not only did you call it “ess cue ell” in the interview but you don’t remember the difference between an inner join and outer join.&lt;/p&gt;

&lt;p&gt;Parsing the jargon used in the world of software development often feels like learning a whole new language (and this is on top of actually learning new programming languages). Here are some terms I wish I knew before starting my first internship:&lt;/p&gt;

&lt;h5 id=&quot;cli-command-line-interface&quot;&gt;CLI (Command Line Interface)&lt;/h5&gt;
&lt;p&gt;A way to interact with a program using text-based commands (often done through Command Prompt/ Terminal/ your shell of choice). A CLI is a lightweight alternative to a GUI.&lt;/p&gt;

&lt;h5 id=&quot;gui-graphical-user-interface&quot;&gt;GUI (Graphical User Interface)&lt;/h5&gt;
&lt;p&gt;Often pronounced “gooey”. This is a way to interact with a program through clicking, scrolling, dragging, and dropping. A GUI is a prettier alternative to a CLI.&lt;/p&gt;

&lt;h5 id=&quot;vcs-version-control-system&quot;&gt;VCS (Version Control System)&lt;/h5&gt;
&lt;p&gt;This is a way for teams to keep track of changes to a codebase. If you’re not yet familiar, checkout &lt;a href=&quot;https://git-scm.com&quot;&gt;Git&lt;/a&gt; (pun intended).&lt;/p&gt;

&lt;h4 id=&quot;front-end&quot;&gt;Front end&lt;/h4&gt;
&lt;p&gt;(AKA client side)&lt;br /&gt;
The part of an application that users interact with. Front end code usually looks like HTML, CSS, and Javascript.&lt;/p&gt;

&lt;h4 id=&quot;back-end&quot;&gt;Back end&lt;/h4&gt;
&lt;p&gt;(AKA server side)&lt;br /&gt;
The part of an application that communicates between the database and the browser. Also the part that users don’t see. Back end code may include Java, Python, or C#.&lt;/p&gt;

&lt;h4 id=&quot;architecture&quot;&gt;Architecture&lt;/h4&gt;
&lt;p&gt;A frustratingly broad term that refers to the structure or design of the codebase. The architecture defines the different elements or layers of the application, as well as properties or relations that exist between them. MVC (model-view-controller) and MVVM (model-view-viewmodel) are two common architectures.&lt;/p&gt;

&lt;h4 id=&quot;saas-software-as-a-service&quot;&gt;SaaS (Software as a Service)&lt;/h4&gt;
&lt;p&gt;Different from &lt;a href=&quot;https://sass-lang.com/&quot;&gt;Sass&lt;/a&gt;, although pronounced the same. SaaS is used interchangeably with “cloud-based solution” and is spoken of fondly because it allows users to access their application from a web browser, rather than downloading and installing it on their computer.&lt;/p&gt;

&lt;h4 id=&quot;ide-integrated-development-environment&quot;&gt;IDE (Integrated Development Environment)&lt;/h4&gt;
&lt;p&gt;An application containing tools to assist with software development. Such tools may include a text editor, debugger, and console.&lt;/p&gt;

&lt;h4 id=&quot;local&quot;&gt;Local&lt;/h4&gt;
&lt;p&gt;To run a program locally means to run it on your current device, rather than on a remote server (or “in production/ beta/ some other environment”). The beauty of running locally is that your changes affect only your local device, i.e. you’re not going to crash that super important client project. When running locally, you can usually access the application and see your changes by going to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt; or &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;localhost&lt;/code&gt; in a web browser.&lt;/p&gt;

&lt;p&gt;This just scratches the surface of the ever-expanding terminology used in the software world. The reality is, regardless of how prepared you try to be, the first day (and week and probably month) is going to be like drinking from a fire hose. Stay curious, enjoy the learning process, and ask for clarification. You might not know (yet!) the difference between MySQL and PostgreSQL but hey, at least now you know how to pronounce it.&lt;/p&gt;

</description>
        <pubDate>Tue, 02 Feb 2021 00:00:00 -0700</pubDate>
        <link>/wtf-is-mvvm</link>
        <guid isPermaLink="true">/wtf-is-mvvm</guid>
        
        <category>Co-op</category>
        
        <category>Internship</category>
        
        <category>Tips</category>
        
        
      </item>
    
  </channel>
</rss>
